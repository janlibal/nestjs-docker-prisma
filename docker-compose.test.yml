name: second-nest-api-test
services:
  # This is the configuration for our PostgreSQL database container
  # Note the `postgres` name is important, in out Node app when we refer
  # to  `host: "postgres"` that value is mapped on the network to the 
  # address of this container.
  api:
    container_name: app-test
    build:
      context: .
      dockerfile: relational.test.Dockerfile
    env_file:
      - env-example-relational
    ports:
      - ${APP_PORT}:${APP_PORT}
    volumes:
      - ./src:/usr/src/app/src
      - ./test:/usr/src/app/test
    depends_on:
      - postgres
  postgres:
    container_name: postgres
    image: janlibal/pg-multipledb # postgres:16.3-alpine
    ports:
      - ${DB_PORT}:${DB_PORT}
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      #POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_MULTIPLE_DATABASES: ${MULTIPLE_DATABASES}
    #restart: unless-stopped
    #volumes:
    #  - postgres:/var/lib/postgresql/data
  # PostgreSQL pgAdmin panel accessible at http://localhost:16543/
  #pgadmin-compose:
  #  container_name: nest-pgadmin
  #  image: dpage/pgadmin4
  #  environment:
  #    PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
  #    PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
  #  ports:
  #    #- "16543:80"
  #    - ${PGADMIN_PORT}:80
  #  depends_on:
  #    - postgres
  redis:
    image: redis:latest
    container_name: redis
    command: redis-server --requirepass root
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    restart: unless-stopped   
    volumes:
      - redis:/data
    #environment:
    #  - ALLOW_EMPTY_PASSWORD=yes
    #  - 'REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL'
    
volumes:
#  postgres:
#    name: boilerplate-db
  redis:
    driver: local
      